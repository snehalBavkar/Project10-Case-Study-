#importing Packages
import pylab as pl
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import mean_squared_error,f1_score,accuracy_score
from sklearn.ensemble import RandomForestClassifier,VotingClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.neural_network import MLPClassifier

import pandas as pd
import numpy as np

#load datase
chicago_df_1 = pd.read_csv('C:/Users/Home/Documents/Snehal/Chicago_Crimes.csv', on_bad_lines='skip', low_memory=False)
chicago_df_2 = pd.read_csv('C:/Users/Home/Documents/Snehal/Chicago_Crimes_2005_to_2007.csv', on_bad_lines='skip',)
chicago_df_3 = pd.read_csv('C:/Users/Home/Documents/Snehal/Chicago_Crimes_2008_to_2011.csv', on_bad_lines='skip')
chicago_df_4 = pd.read_csv('C:/Users/Home/Documents/Snehal/Chicago_Crimes_2012_to_2017.csv', on_bad_lines='skip')
df = pd.concat([chicago_df_1, chicago_df_2, chicago_df_3,chicago_df_4], ignore_index=False, axis=0)

df.info()
# #Dealing with Missing Values
# data["Latitude"].fillna(data["Latitude"].mean(), inplace = True)
# data["Longitude"].fillna(data["Longitude"].mean(), inplace = True)

#drop duplicates attributes
df = df.drop(['Unnamed: 0'], axis=1)
df = df.drop(['ID'], axis=1)
df = df.drop(['Case Number'], axis=1)
df = df.drop(['IUCR'], axis=1)
df = df.drop(['X Coordinate'], axis=1)
df = df.drop(['Y Coordinate'], axis=1)
df = df.drop(['Location'], axis=1)

df = df.dropna()
df= df.drop_duplicates()

df['date2'] = pd.to_datetime(df['Date'])
df['Year'] = df['date2'].dt.year
df['Month'] = df['date2'].dt.month
df['Day'] = df['date2'].dt.day
df['Hour'] = df['date2'].dt.hour
df['Minute'] = df['date2'].dt.minute
df['Second'] = df['date2'].dt.second
df = df.drop(['Date'], axis=1)
df = df.drop(['date2'], axis=1)
df = df.drop(['Updated On'], axis=1)
df.head()

df = df.sample(n=100000)
Classes = df['Primary Type'].unique()
Classes

#eliminate none criminal crimes
df.drop(df.index [df[ 'Primary Type' ] == 'PUBLIC INDECENCY' ] , inplace = True)
df.drop(df.index [df[ 'Primary Type' ] == 'NON-CRIMINAL (SUBJECT SPECIFIED)' ] , inplace = True)
df.drop(df.index [df[ 'Primary Type' ] == 'NON-CRIMINAL' ] , inplace = True)
df.drop(df.index [df[ 'Primary Type' ] == 'NON - CRIMINAL' ] , inplace = True)
df.drop(df.index [df[ 'Primary Type' ] == 'OBSCENITY' ] , inplace = True)
df.drop(df.index [df[ 'Primary Type' ] == 'CONCEALED CARRY LICENSE VIOLATION' ] , inplace = True)

#collapse similar crimes together
df_condition = [(df['Primary Type'] == 'MOTOR VEHICLE THEFT'),
                (df['Primary Type'] == 'THEFT'),
                (df['Primary Type'] == 'ROBBERY'),
                (df['Primary Type'] == 'BURGLARY'),
                (df['Primary Type'] == 'ASSAULT'),
                (df['Primary Type'] == 'PROSTITUTION'),
                (df['Primary Type'] == 'BATTERY'),
                (df['Primary Type'] == 'CRIM SEXUAL ASSAULT'),
                (df['Primary Type'] == 'SEX OFFENSE'),
                (df['Primary Type'] == 'INTIMIDATION'),
                (df['Primary Type'] == 'STALKING'),
                (df['Primary Type'] == 'ARSON'),
                 (df['Primary Type'] == 'KIDNAPPING'),
                (df['Primary Type'] == 'OFFENSE INVOLVING CHILDREN'),
                (df['Primary Type'] =='PUBLIC PEACE VIOLATION'),
                (df['Primary Type'] == 'OTHER NARCOTIC VIOLATION'),
                 (df['Primary Type'] == 'NARCOTICS'),
                (df['Primary Type'] == 'LIQUOR LAW VIOLATION'),
                (df['Primary Type'] == 'CRIMINAL DAMAGE'),
                (df['Primary Type'] == 'HUMAN TRAFFICKING'),
                 (df['Primary Type'] == 'WEAPONS VIOLATION'),
                (df['Primary Type'] == 'INTERFERENCE WITH PUBLIC OFFICER'),
                (df['Primary Type'] == 'CRIMINAL TRESPASS'),
                 (df['Primary Type'] == 'HOMICIDE'),
                (df['Primary Type'] == 'DECEPTIVE PRACTICE'),
                (df['Primary Type'] == 'OTHER OFFENSE'),
                (df['Primary Type'] == 'GAMBLING'
                )
               ]
df_categ = ['THEFT', 'THEFT', 'THEFT','THEFT',
            'ASSAULT' , 'ASSAULT' , 'ASSAULT' , 'ASSAULT', 'ASSAULT','ASSAULT','ASSAULT','ASSAULT','ASSAULT','ASSAULT', 'ASSAULT',
            'NARCOTICS', 'NARCOTICS', 'NARCOTICS',
            'CRIMINAL DAMAGE','CRIMINAL DAMAGE','CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE',
            'OTHER OFFENSE','OTHER OFFENSE','OTHER OFFENSE', 'OTHER OFFENSE']
df['Type'] = np.select(df_condition , df_categ)

df.info()

pl.figure(figsize=(14,10))
pl.title('Amount of Crimes by Primary Type')
pl.ylabel('Crime Type')
pl.xlabel('Amount of Crimes')
df.groupby([df['Primary Type']]).size().sort_values(ascending=True).plot(kind='barh')
pl.show()

Classes = df['Type'].unique()
Classes

Classes = df['Primary Type'].unique()
Classes

df['Minute'] = pd.factorize(df["Minute"])[0]
df['Minute'].unique()

df['Longitude'] = pd.factorize(df["Longitude"])[0]
df['Longitude'].unique()
df['Latitude'] = pd.factorize(df["Latitude"])[0]
df['Latitude'].unique()

# cor_target = abs(corr1['Type'])
# relevant_features = cor_target[cor_target>0.1]
# relevant_features

Target = 'Type'
print('Target: ', Target)

Features = ["Longitude", "Latitude", "Minute"]
print('Full Features: ', Features)

x, y = train_test_split(df,test_size = 0.2,train_size = 0.8,random_state= 3)

x_train = x[Features]    #Features to train
y_train= x[Target]      #Target Class to train
x_test = y[Features]    #Features to test
y_test = y[Target]      #Target Class to test

print('Feature Set Used    : ', Features)
print('Target Class        : ', Target)
print('Training Set Size   : ', x.shape)
print('Test Set Size       : ', y.shape)

rf_model = RandomForestClassifier(n_estimators=150, # Number of trees
                                  max_depth = 15)

# Model Training
rf_model.fit(x_train,y_train)

# Prediction
result = rf_model.predict(y[Features])
ac_sc = accuracy_score(y_test, result)

print("========== Random Forest Results ==========")
print("Accuracy    : ", ac_sc)
# #KNN
# knn_model = KNeighborsClassifier(n_neighbors=150)
# # Model Training
# knn_model.fit(x_train,y_train))
# # Prediction
# result = knn_model.predict(y[Features])
# ac_sc = accuracy_score(y_test, result)
# print("========== K-Nearest Neighbors Results ==========")
# print("Accuracy    : ", ac_sc)


#OUTPUT
'''
<class 'pandas.core.frame.DataFrame'>
Int64Index: 7941282 entries, 0 to 1456713
Data columns (total 23 columns):
 #   Column                Dtype
---  ------                -----
 0   Unnamed: 0            int64
 1   ID                    int64
 2   Case Number           object
 3   Date                  object
 4   Block                 object
 5   IUCR                  object
 6   Primary Type          object
 7   Description           object
 8   Location Description  object
 9   Arrest                bool
 10  Domestic              bool
 11  Beat                  int64
 12  District              float64
 13  Ward                  float64
 14  Community Area        float64
 15  FBI Code              object
 16  X Coordinate          float64
 17  Y Coordinate          object
 18  Year                  float64
 19  Updated On            object
 20  Latitude              object
 21  Longitude             float64
 22  Location              object
dtypes: bool(2), float64(6), int64(3), object(12)
memory usage: 1.3+ GB
<class 'pandas.core.frame.DataFrame'>
Int64Index: 99991 entries, 1162420 to 1712098
Data columns (total 20 columns):
 #   Column                Non-Null Count  Dtype
---  ------                --------------  -----
 0   Block                 99991 non-null  object
 1   Primary Type          99991 non-null  object
 2   Description           99991 non-null  object
 3   Location Description  99991 non-null  object
 4   Arrest                99991 non-null  bool
 5   Domestic              99991 non-null  bool
 6   Beat                  99991 non-null  int64
 7   District              99991 non-null  float64
 8   Ward                  99991 non-null  float64
 9   Community Area        99991 non-null  float64
 10  FBI Code              99991 non-null  object
 11  Year                  99991 non-null  int64
 12  Latitude              99991 non-null  object
 13  Longitude             99991 non-null  float64
 14  Month                 99991 non-null  int64
 15  Day                   99991 non-null  int64
 16  Hour                  99991 non-null  int64
 17  Minute                99991 non-null  int64
 18  Second                99991 non-null  int64
 19  Type                  99991 non-null  object
dtypes: bool(2), float64(4), int64(7), object(7)
memory usage: 14.7+ MB

array(['CRIMINAL DAMAGE', 'THEFT', 'NARCOTICS', 'ASSAULT',
       'OTHER OFFENSE', '0'], dtype=object)

array(['CRIMINAL TRESPASS', 'ROBBERY', 'NARCOTICS',
       'LIQUOR LAW VIOLATION', 'ASSAULT', 'BATTERY', 'WEAPONS VIOLATION',
       'THEFT', 'OTHER OFFENSE', 'CRIMINAL DAMAGE', 'DECEPTIVE PRACTICE',
       'SEX OFFENSE', 'MOTOR VEHICLE THEFT', 'BURGLARY', 'PROSTITUTION',
       'CRIM SEXUAL ASSAULT', 'GAMBLING', 'OFFENSE INVOLVING CHILDREN',
       'PUBLIC PEACE VIOLATION', 'INTERFERENCE WITH PUBLIC OFFICER',
       'STALKING', 'KIDNAPPING', 'ARSON', 'HOMICIDE', 'INTIMIDATION',
       'OTHER NARCOTIC VIOLATION', 'RITUALISM'], dtype=object)

array([0, 1, 2, 3, 4, 5])

array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
       51, 52, 53, 54, 55, 56, 57, 58, 59])
array([    0,     1,     2, ..., 70965, 70966, 70967])
Target:  Type
Full Features:  ['Longitude', 'Latitude', 'Minute']

Feature Set Used    :  ['Longitude', 'Latitude', 'Minute']
Target Class        :  Type
Training Set Size   :  (79988, 20)
Test Set Size       :  (19997, 20)

========== Random Forest Results ==========
Accuracy    :  0.4073611041656248
'''
